on:
  workflow_call:
    inputs:
      tag:
        type: string
        description: tag to create release
        required: true

name: Upload Release for lambdas

jobs:
  release-lambdas:
    name: Upload Release for runners lambdas
    runs-on: ubuntu-latest
    container: node:20
    permissions:
      contents: write
    env:
      REF: ${{ inputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      # Runner Binaries Syncer
      - name: Install dependencies - Runner Binaries Syncer
        run: yarn install
        working-directory: terraform-aws-github-runner/modules/runner-binaries-syncer/lambdas/runner-binaries-syncer
      - name: Build distribution - Runner Binaries Syncer
        run: yarn build
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"
        working-directory: terraform-aws-github-runner/modules/runner-binaries-syncer/lambdas/runner-binaries-syncer
      - name: Copy js to root - Runner Binaries Syncer
        run: cp terraform-aws-github-runner/modules/runner-binaries-syncer/lambdas/runner-binaries-syncer/dist/index.js .
      - name: create lambda zip - Runner Binaries Syncer
        uses: montudor/action-zip@v1
        with:
          args: zip runner-binaries-syncer.zip index.js

      # ALI scaleUp scaleDown
      - name: Install dependencies - Runners
        run: yarn install
        working-directory: terraform-aws-github-runner/modules/runners/lambdas/runners
      - name: Build distribution - Runners
        run: yarn build
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"
        working-directory: terraform-aws-github-runner/modules/runners/lambdas/runners
      - name: Copy js to root - Runners
        run: cp terraform-aws-github-runner/modules/runners/lambdas/runners/dist/index.js .
      - name: create lambda zip - Runners
        uses: montudor/action-zip@v1
        with:
          args: zip runners.zip index.js

      # Webhook
      - name: Install dependencies - Webhook
        run: yarn install
        working-directory: terraform-aws-github-runner/modules/webhook/lambdas/webhook
      - name: Build distribution - Webhook
        run: yarn build
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"
        working-directory: terraform-aws-github-runner/modules/webhook/lambdas/webhook
      - name: Copy js to root - Webhook
        run: cp terraform-aws-github-runner/modules/webhook/lambdas/webhook/dist/index.js .
      - name: create lambda zip- Webhook
        uses: montudor/action-zip@v1
        with:
          args: zip webhook.zip index.js

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "runner-binaries-syncer.zip,runners.zip,webhook.zip"
          allowUpdates: true
          draft: true
          name: ${{ inputs.tag }}
          tag: ${{ inputs.tag }}
          updateOnlyUnreleased: true

  release-ci-queue-pct:
    name: Upload Release for ci-queue-pct lambda
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REF: ${{ inputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build deployment.zip
        working-directory: aws/lambda/ci-queue-pct
        run: make deployment.zip

      - name: Copy deployment.zip to root
        run: cp aws/lambda/ci-queue-pct/deployment.zip ci-queue-pct.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "ci-queue-pct.zip"
          allowUpdates: true
          draft: true
          name: ${{ inputs.tag }}
          tag: ${{ inputs.tag }}
          updateOnlyUnreleased: true

  release-oss-ci-job-queue-time:
    name:  Upload Release for oss-ci-job-queue-time lambda
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REF: ${{ inputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build deployment.zip
        working-directory: aws/lambda/oss_ci_job_queue_time
        run: make deployment.zip

      - name: Copy deployment.zip to root
        run: cp aws/lambda/oss_ci_job_queue_time/deployment.zip oss-ci-job-queue-time.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "oss-ci-job-queue-time.zip"
          allowUpdates: true
          draft: true
          name: ${{ inputs.tag }}
          tag: ${{ inputs.tag }}
          updateOnlyUnreleased: true

  finish-release:
    needs:
      - release-lambdas
      - release-ci-queue-pct
      - release-oss-ci-job-queue-time
    name: Mark the release as final and publish it
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REF: ${{ inputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          name: ${{ inputs.tag }}
          tag: ${{ inputs.tag }}
          updateOnlyUnreleased: true
