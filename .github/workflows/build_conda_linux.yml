name: Build Linux Conda

on:
  workflow_call:
    inputs:
      conda-package-directory:
        description: 'Directory where your meta.yaml for your conda package lives'
        required: true
        type: string
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string
      test-infra-repository:
        description: "Test infra repository to use"
        default: "pytorch/test-infra"
        type: string
      test-infra-ref:
        description: "Test infra reference to use"
        default: ""
        type: string
      build-matrix:
        description: "Build matrix to utilize"
        default: ""
        type: string
      pre-script:
        description: "Pre script to run prior to build"
        default: ""
        type: string
      post-script:
        description: "Post script to run prior to build"
        default: ""
        type: string
      smoke-test-script:
        description: "Script for Smoke Test for a specific domain"
        default: ""
        type: string
      env-var-script:
        description: "Script that sets Domain-Specific Environment Variables"
        default: ""
        type: string
      package-name:
        description: "Name of the actual python package that is imported"
        default: ""
        type: string
      trigger-event:
        description: "Trigger Event in caller that determines whether or not to upload"
        default: ""
        type: string
    secrets:
      CONDA_PYTORCHBOT_TOKEN:
        description: "Access Token needed to upload binaries to anaconda"
        required: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    env:
      CONDA_PACKAGE_DIRECTORY: ${{ inputs.conda-package-directory }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: conda
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
      CU_VERSION: ${{ matrix.desired_cuda }}
    name: ${{ matrix.build_name }}
    runs-on: ${{ matrix.validation_runner }}
    container:
      image: ${{ matrix.container_image }}
    # If a build is taking longer than 60 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          # Support the use case where we need to checkout someone's fork
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra
      - uses: ./test-infra/.github/actions/setup-binary-builds
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          setup-miniconda: false
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Combine Env Var and Build Env Files
        if: ${{ inputs.env-var-script != '' }}
        working-directory: ${{ inputs.repository }}
        run: |
          cat "${{ inputs.env-var-script }}" >> "${BUILD_ENV_FILE}"
      - name: Run pre-script
        working-directory: ${{ inputs.repository }}
        env:
          PRE_SCRIPT: ${{ inputs.pre-script }}
        if: ${{ inputs.pre-script != '' }}
        run: |
          source "${BUILD_ENV_FILE}"
          if [[ ! -f ${PRE_SCRIPT} ]]; then
            echo "::error::Specified pre-script file (${PRE_SCRIPT}) not found, not going execute it"
            exit 1
          else
            ${CONDA_RUN} bash "${PRE_SCRIPT}"
          fi
      - name: Setup base environment variables
        run: |
          echo "SOURCE_ROOT_DIR=${GITHUB_WORKSPACE}/${REPOSITORY}" >> "${GITHUB_ENV}"
      - name: Build the conda (conda-build)
        working-directory: ${{ inputs.repository }}
        env:
          CUDATOOLKIT_CHANNEL: ${{ env.CUDATOOLKIT_CHANNEL }}
        run: |
          source "${BUILD_ENV_FILE}"
          export FFMPEG_ROOT="${PWD}"/third_party/ffmpeg
          export USE_FFMPEG="1"
          ${CONDA_RUN} conda build \
            -c defaults \
            -c "${CUDATOOLKIT_CHANNEL}" \
            -c "pytorch-${CHANNEL}" \
            --no-anaconda-upload \
            --python "${PYTHON_VERSION}" \
            --output-folder dist/ \
            "${CONDA_PACKAGE_DIRECTORY}"
      - name: Upload artifact to GitHub
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.repository }}/dist/
      - name: Run post-script
        working-directory: ${{ inputs.repository }}
        env:
          POST_SCRIPT: ${{ inputs.post-script }}
        if: ${{ inputs.post-script != '' }}
        run: |
          source "${BUILD_ENV_FILE}"
          if [[ ! -f ${POST_SCRIPT} ]]; then
            echo "::error::Specified post-script file (${POST_SCRIPT}) not found, not going execute it"
            exit 1
          else
            ${CONDA_RUN} bash "${POST_SCRIPT}"
          fi
      - name: Smoke Test
        env:
          PACKAGE_NAME: ${{ inputs.package-name }}
          SMOKE_TEST_SCRIPT: ${{ inputs.smoke-test-script }}
          GPU_ARCH: ${{ matrix.gpu_arch_type }}
          DESIRED_CUDA: ${{ matrix.desired_cuda }}
          GPU_ARCH_VERSION: ${{ matrix.gpu_arch_version }}
        run: |
          set -ex
          source "${BUILD_ENV_FILE}"
          CONDA_OUTPUT_PATH="${{ inputs.repository }}/dist/linux-64/"
          echo "$CONDA_OUTPUT_PATH"
          BINARY_NAME=$(ls "$CONDA_OUTPUT_PATH"/*.tar.bz2)
          echo "$BINARY_NAME"
          if [[ "${GPU_ARCH}" = "cpu" ]]; then
            ${CONDA_RUN} conda install -v -y -c pytorch-"${CHANNEL}" pytorch
          elif [[ "${GPU_ARCH}" = "cuda" && ("${DESIRED_CUDA}" = "cu116" || "${DESIRED_CUDA}" = "cu117") ]]; then
            ${CONDA_RUN} conda install -v -y -c pytorch-"${CHANNEL}" -c nvidia pytorch pytorch-cuda="${GPU_ARCH_VERSION}"
          elif [[ "${GPU_ARCH}" = "cuda" ]]; then
            conda install -v -y -c pytorch-"${CHANNEL}" pytorch cudatoolkit="${GPU_ARCH_VERSION}"
          else
            ${CONDA_RUN} conda install -v -y -c pytorch-"${CHANNEL}" pytorch
          fi
          if [[ "${{ inputs.package-name }}" = "torchvision" ]]; then
              ${CONDA_RUN} conda install -y 'numpy>=1.11'
              ${CONDA_RUN} conda install pillow
          fi
          if [[ "${{ inputs.package-name }}" = "torchdata" ]]; then
              ${CONDA_RUN} conda install -y portalocker>=2.0.0
          fi
          ${CONDA_RUN} conda install "$BINARY_NAME"

          if [[ ! -f "${{ inputs.repository }}"/${SMOKE_TEST_SCRIPT} ]]; then
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} not found"
            ${CONDA_RUN} python3 -c "import ${PACKAGE_NAME}; print('package version is ', ${PACKAGE_NAME}.__version__)"
          else
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} found"
            export LD_LIBRARY_PATH="{LD_LIBRARY_PATH}:${{ inputs.repository }}/third_party/ffmpeg/lib"
            conda install 'ffmpeg<5'
            ${CONDA_RUN} python "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT}"
          fi
      - name: Upload package to conda
        if: ${{ inputs.trigger-event == 'push' }}
        working-directory: ${{ inputs.repository }}
        env:
          CONDA_PYTORCHBOT_TOKEN: ${{ secrets.CONDA_PYTORCHBOT_TOKEN }}
        run: |
          source "${BUILD_ENV_FILE}"
          set -x
          conda create --yes -n upload_env python="${PYTHON_VERSION}"
          conda run -n upload_env conda install -yq anaconda-client
          conda run -n upload_env anaconda -t "${CONDA_PYTORCHBOT_TOKEN}" upload dist/linux-64/*.tar.bz2 -u "pytorch-${CHANNEL}" --label main --no-progress --force

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
