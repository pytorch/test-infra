name: Build MacOS Conda

on:
  workflow_call:
    inputs:
      conda-package-directory:
        description: 'Directory where your meta.yaml for your conda package lives'
        required: true
        type: string
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string
      test-infra-repository:
        description: "Test infra repository to use"
        default: "pytorch/test-infra"
        type: string
      test-infra-ref:
        description: "Test infra reference to use"
        default: ""
        type: string
      build-matrix:
        description: "Build matrix to utilize"
        default: ""
        type: string
      pre-script:
        description: "Pre script to run prior to build"
        default: ""
        type: string
      post-script:
        description: "Post script to run prior to build"
        default: ""
        type: string
      runner-type:
        description: "Runner environment specified."
        default: ""
        type: string
      package-name:
        description: "Name of the actual python package that is imported"
        default: ""
        type: string
      trigger-event:
        description: "Trigger Event in caller that determines whether or not to upload"
        default: ""
        type: string
      smoke-test-script:
        description: "Script for Smoke Test for a specific domain"
        default: ""
        type: string
    secrets:
      CONDA_PYTORCHBOT_TOKEN:
        description: "Access Token needed to upload binaries to anaconda"
        required: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    env:
      CONDA_PACKAGE_DIRECTORY: ${{ inputs.conda-package-directory }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: conda
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
      CU_VERSION: cpu
    name: ${{ matrix.build_name }}
    runs-on: ${{ inputs.runner-type }}
    # If a build is taking longer than 60 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          # Support the use case where we need to checkout someone's fork
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra
      - name: Set env variable for architecture name
        run: echo "ARCH_NAME=$(uname -m)" >> "${GITHUB_ENV}"
      - uses: ./test-infra/.github/actions/setup-binary-builds
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          setup-miniconda: false
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run pre-script
        working-directory: ${{ inputs.repository }}
        env:
          PRE_SCRIPT: ${{ inputs.pre-script }}
        if: ${{ inputs.pre-script != '' }}
        run: |
          if [[ ! -f ${PRE_SCRIPT} ]]; then
            echo "::error::Specified pre-script file (${PRE_SCRIPT}) not found, not going execute it"
            exit 1
          else
            ${CONDA_RUN} bash "${PRE_SCRIPT}"
          fi
      - name: Setup base environment variables
        run: |
          echo "SOURCE_ROOT_DIR=${GITHUB_WORKSPACE}/${REPOSITORY}" >> "${GITHUB_ENV}"
      - name: Build the conda (conda-build)
        working-directory: ${{ inputs.repository }}
        env:
          USE_FFMPEG: 1
          USE_OPENMP: 0
        run: |
          source "${BUILD_ENV_FILE}"

          export FFMPEG_ROOT="${PWD}/third_party/ffmpeg"

          ${CONDA_RUN} conda build \
            -c defaults \
            -c conda-forge \
            -c nvidia \
            -c "pytorch-${CHANNEL}" \
            --no-anaconda-upload \
            --python "${PYTHON_VERSION}" \
            --output-folder dist/ \
            "${CONDA_PACKAGE_DIRECTORY}"
      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.repository }}/dist/
      - name: Run post-script
        working-directory: ${{ inputs.repository }}
        env:
          POST_SCRIPT: ${{ inputs.post-script }}
        if: ${{ inputs.post-script != '' }}
        run: |
          if [[ ! -f ${POST_SCRIPT} ]]; then
            echo "::error::Specified post-script file (${POST_SCRIPT}) not found, not going execute it"
            exit 1
          else
            ${CONDA_RUN} bash "${POST_SCRIPT}"
          fi
      - name: Upload package to conda
        if: ${{ inputs.trigger-event == 'push' }}
        working-directory: ${{ inputs.repository }}
        env:
          CONDA_PYTORCHBOT_TOKEN: ${{ secrets.CONDA_PYTORCHBOT_TOKEN }}
        run: |
          source "${BUILD_ENV_FILE}"
          ${CONDA_RUN} conda install -yq anaconda-client
          set -x
          ANACONDA_PATH=$(${CONDA_RUN} conda info --base)/bin
          export ANACONDA_PATH
          arch_name="$(uname -m)"
          if [ "${arch_name}" = "arm64" ]; then
            export ARCH_NAME="osx-arm64"
          else
            export ARCH_NAME="osx-64"
          fi
          "$ANACONDA_PATH/anaconda" -t "${CONDA_PYTORCHBOT_TOKEN}" upload "dist/${ARCH_NAME}/*.tar.bz2" -u "pytorch-${CHANNEL}" --label main --no-progress --force
      - name: Run Primitive Smoke Tests
        shell: bash -l {0}
        env:
          PACKAGE_NAME: ${{ inputs.package-name }}
          SMOKE_TEST_SCRIPT: ${{ inputs.smoke-test-script }}
        run: |
          source "${BUILD_ENV_FILE}"
          
          arch_name="$(uname -m)"
          if [ "${arch_name}" = "arm64" ]; then
            export ARCH_NAME="osx-arm64"
          else
            export ARCH_NAME="osx-64"
          fi
          
          if [[ ! -f "${{ inputs.repository }}"/${SMOKE_TEST_SCRIPT} ]]; then
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} not found"
          else
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} found"

            ${CONDA_RUN} conda install -y pytorch -c pytorch cpuonly

            CONDA_BINARY="$(ls ${{ inputs.repository }}/dist/${ARCH_NAME}/*.tar.bz2)"

            ${CONDA_RUN} conda install -v -y -c pytorch-nightly pytorch
            ${CONDA_RUN} conda install --offline "$CONDA_BINARY"

            ${CONDA_RUN} conda install -y 'ffmpeg<5'
            ${CONDA_RUN} python3 "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT}"
          fi

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
