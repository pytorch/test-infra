name: Build MacOS Conda

on:
  workflow_call:
    inputs:
      conda-package-directory:
        description: 'Directory where your meta.yaml for your conda package lives'
        required: true
        type: string
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string
      test-infra-repository:
        description: "Test infra repository to use"
        default: "pytorch/test-infra"
        type: string
      test-infra-ref:
        description: "Test infra reference to use"
        default: ""
        type: string
      build-matrix:
        description: "Build matrix to utilize"
        default: ""
        type: string
      pre-script:
        description: "Pre script to run prior to build"
        default: ""
        type: string
      post-script:
        description: "Post script to run prior to build"
        default: ""
        type: string
      runner-type:
        description: "Runner environment specified."
        default: ""
        type: string
      package-name:
        description: "Name of the actual python package that is imported"
        default: ""
        type: string
      env-var-script:
        description: "Script that sets Domain-Specific Environment Variables"
        default: ""
        type: string
      trigger-event:
        description: "Trigger Event in caller that determines whether or not to upload"
        default: ""
        type: string
      smoke-test-script:
        description: "Script for Smoke Test for a specific domain"
        default: ""
        type: string
      cache-path:
        description: "The path(s) on the runner to cache or restore. The path is relative to repository."
        default: ""
        type: string
      cache-key:
        description: "The key created when saving a cache and the key used to search for a cache."
        default: ""
        type: string
    secrets:
      CONDA_PYTORCHBOT_TOKEN:
        description: "Access Token needed to upload binaries to anaconda nightly channel"
        required: false
      CONDA_PYTORCHBOT_TOKEN_TEST:
        description: "Access Token needed to upload binaries to anaconda test channel"
        required: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    env:
      CONDA_PACKAGE_DIRECTORY: ${{ inputs.conda-package-directory }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: conda
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
      CU_VERSION: cpu
    name: ${{ matrix.build_name }}
    runs-on: ${{ inputs.runner-type }}
    # If a build is taking longer than 60 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 60
    steps:
      - name: Clean workspace
        run: |
          set -euxo pipefail
          echo "::group::Cleanup debug output"
          rm -rfv "${GITHUB_WORKSPACE}"
          mkdir -p "${GITHUB_WORKSPACE}"
          echo "::endgroup::"
      - uses: actions/checkout@v3
        with:
          # Support the use case where we need to checkout someone's fork
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra
      - name: Set env variable for architecture name
        run: echo "ARCH_NAME=$(uname -m)" >> "${GITHUB_ENV}"
      - uses: ./test-infra/.github/actions/set-channel
      - name: Set PYTORCH_VERSION
        if: ${{ env.CHANNEL == 'test' }}
        run: |
          # When building RC, set the version to be the current candidate version,
          # otherwise, leave it alone so nightly will pick up the latest
          echo "PYTORCH_VERSION=${{ matrix.stable_version }}" >> "${GITHUB_ENV}"
      - uses: ./test-infra/.github/actions/setup-binary-builds
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          setup-miniconda: false
          python-version: ${{ env.PYTHON_VERSION }}
          cuda-version: ${{ env.CU_VERSION }}
      - name: Combine Env Var and Build Env Files
        if: ${{ inputs.env-var-script != '' }}
        working-directory: ${{ inputs.repository }}
        run: |
          set -euxo pipefail
          cat "${{ inputs.env-var-script }}" >> "${BUILD_ENV_FILE}"
      - name: Run Pre-Script with Caching
        if: ${{ inputs.pre-script != '' }}
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          cache-path: ${{ inputs.cache-path }}
          cache-key: ${{ inputs.cache-key }}
          repository: ${{ inputs.repository  }}
          script: ${{ inputs.pre-script }}
      - name: Setup base environment variables
        run: |
          set -euxo pipefail
          echo "SOURCE_ROOT_DIR=${GITHUB_WORKSPACE}/${REPOSITORY}" >> "${GITHUB_ENV}"
      - name: Build the conda (conda-build)
        working-directory: ${{ inputs.repository }}
        run: |
          set -euxo pipefail
          # shellcheck disable=SC1090
          source "${BUILD_ENV_FILE}"

          if [[ "${{ inputs.package-name }}" = "torchaudio" ]]; then
            export USE_OPENMP="0"
          fi

          ${CONDA_RUN} conda build \
            -c defaults \
            -c "pytorch-${CHANNEL}" \
            --no-anaconda-upload \
            --python "${PYTHON_VERSION}" \
            --output-folder distr/ \
            "${CONDA_PACKAGE_DIRECTORY}"
      - name: Run Post-Script
        if: ${{ inputs.post-script != '' }}
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          repository: ${{ inputs.repository  }}
          script: ${{ inputs.post-script }}
      - name: Upload artifact to GitHub
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.repository }}/distr/
      - name: Smoke Test
        shell: bash -l {0}
        env:
          PACKAGE_NAME: ${{ inputs.package-name }}
          SMOKE_TEST_SCRIPT: ${{ inputs.smoke-test-script }}
        run: |
          set -euxo pipefail
          source "${BUILD_ENV_FILE}"

          arch_name="$(uname -m)"
          if [ "${arch_name}" = "arm64" ]; then
            export ARCH_NAME="osx-arm64"
          else
            export ARCH_NAME="osx-64"
          fi

          export CONDA_ENV_SMOKE="${RUNNER_TEMP}/pytorch_pkg_helpers_${GITHUB_RUN_ID}_smoke"
          conda create --yes --quiet --prefix "${CONDA_ENV_SMOKE}" python="${PYTHON_VERSION}"
          export CONDA_RUN_SMOKE="conda run -p ${CONDA_ENV_SMOKE}"
          export OLD_PATH=${PATH}
          export PATH="${CONDA_ENV_SMOKE}/bin:${PATH}"
          CONDA_LOCAL_CHANNEL="file://$(readlink -f ${{ inputs.repository }}/distr)"

          CONSTRAINT_BUILD=""
          if [[ "${CHANNEL}" = "test" ]]; then
            CONSTRAINT_BUILD="=${BUILD_VERSION}"
          fi

          ${CONDA_RUN_SMOKE} conda install \
            --quiet \
            --yes \
            -c "${CONDA_LOCAL_CHANNEL}" \
            -c pytorch-${CHANNEL} \
            -c defaults \
            "${PACKAGE_NAME}${CONSTRAINT_BUILD}" \
            "--override-channels"

          # check for installed package channel
          CONDA_PKG=$(${CONDA_RUN_SMOKE} conda list | grep "${PACKAGE_NAME}" | grep "${CONDA_LOCAL_CHANNEL}")
          if [[ -z "${CONDA_PKG}" ]]; then
            ${CONDA_RUN_SMOKE} conda list | grep "${PACKAGE_NAME}"
            echo "${PACKAGE_NAME} is not installed from local channel"
            exit 1
          fi

          if [[ ! -f "${{ inputs.repository }}"/${SMOKE_TEST_SCRIPT} ]]; then
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} not found"
            ${CONDA_RUN_SMOKE} python3 -c "import ${PACKAGE_NAME}; print('package version is ', ${PACKAGE_NAME}.__version__)"
          else
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} found"
            ${CONDA_RUN_SMOKE} python3 "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT}"
          fi

          export PATH=${OLD_PATH}
          conda env remove -p "${CONDA_ENV_SMOKE}"
      - name: Clean up disk space
        if: always()
        continue-on-error: true
        uses: ./test-infra/.github/actions/check-disk-space

  upload:
    needs: build
    uses: ./.github/workflows/_binary_conda_upload.yml
    with:
      repository: ${{ inputs.repository }}
      ref: ${{ inputs.ref }}
      test-infra-repository: ${{ inputs.test-infra-repository }}
      test-infra-ref: ${{ inputs.test-infra-ref }}
      build-matrix: ${{ inputs.build-matrix }}
      trigger-event: ${{ inputs.trigger-event }}
    secrets:
      CONDA_PYTORCHBOT_TOKEN: ${{ secrets.CONDA_PYTORCHBOT_TOKEN }}
      CONDA_PYTORCHBOT_TOKEN_TEST: ${{ secrets.CONDA_PYTORCHBOT_TOKEN_TEST }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
