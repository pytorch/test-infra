name: Build Windows Conda

on:
  workflow_call:
    inputs:
      runner-type:
        description: "Runner type"
        default: ""
        type: string
      conda-package-directory:
        description: 'Directory where your meta.yaml for your conda package lives'
        required: true
        type: string
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string
      test-infra-repository:
        description: "Test infra repository to use"
        default: "pytorch/test-infra"
        type: string
      test-infra-ref:
        description: "Test infra reference to use"
        default: ""
        type: string
      build-matrix:
        description: "Build matrix to utilize"
        default: ""
        type: string
      pre-script:
        description: "Pre script to run prior to build"
        default: ""
        type: string
      post-script:
        description: "Post script to run prior to build"
        default: ""
        type: string
      package-name:
        description: "Name of the actual python package that is imported"
        default: ""
        type: string
      trigger-event:
        description: "Trigger Event in caller that determines whether or not to upload"
        default: ""
        type: string
      smoke-test-script:
        description: "Script for Smoke Test for a specific domain"
        default: ""
        type: string
      cache-path:
        description: "The path(s) on the runner to cache or restore. The path is relative to repository."
        default: ""
        type: string
      cache-key:
        description: "The key created when saving a cache and the key used to search for a cache."
        default: ""
        type: string
    secrets:
      CONDA_PYTORCHBOT_TOKEN:
        description: "Access Token needed to upload binaries to anaconda nightly channel"
        required: false
      CONDA_PYTORCHBOT_TOKEN_TEST:
        description: "Access Token needed to upload binaries to anaconda test channel"
        required: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}
    env:
      CONDA_PACKAGE_DIRECTORY: ${{ inputs.conda-package-directory }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: conda
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
      CU_VERSION: ${{ matrix.desired_cuda }}
    name: ${{ matrix.build_name }}
    runs-on: ${{ matrix.validation_runner }}
    defaults:
      run:
        shell: bash -l {0}
    # If a build is taking longer than 60 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          # Support the use case where we need to checkout someone's fork
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra
      - uses: ./test-infra/.github/actions/set-channel
      - name: Set PYTORCH_VERSION
        if: ${{ env.CHANNEL == 'test' }}
        run: |
          # When building RC, set the version to be the current candidate version,
          # otherwise, leave it alone so nightly will pick up the latest
          echo "PYTORCH_VERSION=${{ matrix.stable_version }}" >> "${GITHUB_ENV}"
      - uses: ./test-infra/.github/actions/setup-ssh
        name: Setup SSH
        with:
          github-secret: ${{ secrets.GITHUB_TOKEN }}
          activate-with-label: false
          instructions: "SSH with rdesktop using ssh -L 3389:localhost:3389 %%username%%@%%hostname%%"
      - name: Add Conda scripts to GitHub path
        run: |
          echo "C:/Jenkins/Miniconda3/Scripts" >> $GITHUB_PATH
      - uses: ./test-infra/.github/actions/setup-binary-builds
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          setup-miniconda: false
          python-version: ${{ env.PYTHON_VERSION }}
          cuda-version: ${{ env.CU_VERSION }}
      - name: Run Pre-Script with Caching
        if: ${{ inputs.pre-script != '' }}
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          cache-path: ${{ inputs.cache-path }}
          cache-key: ${{ inputs.cache-key }}
          repository: ${{ inputs.repository  }}
          script: ${{ inputs.pre-script }}
          is_windows: 'enabled'
      - name: Setup base environment variables
        run: |
          # //\\// means replace every backslash with slash
          echo "SOURCE_ROOT_DIR=${GITHUB_WORKSPACE//\\//}/${REPOSITORY}" >> "${GITHUB_ENV}"
      - name: VS2019 conda-build
        working-directory: ${{ inputs.repository }}
        env:
          CUDATOOLKIT_CHANNEL: ${{ env.CUDATOOLKIT_CHANNEL }}
          PACKAGE_NAME: ${{ inputs.package-name }}
        run: |
          export VSTOOLCHAIN_PACKAGE=vs2019
          export VSDEVCMD_ARGS=''
          source "${BUILD_ENV_FILE}"
          source /c/Jenkins/Miniconda3/etc/profile.d/conda.sh
          conda install -yq conda-build "conda-package-handling!=1.5.0" conda=23.7.3

          conda build \
            -c defaults \
            -c "${CUDATOOLKIT_CHANNEL}" \
            -c "pytorch-${CHANNEL}" \
            --no-anaconda-upload \
            --python "${PYTHON_VERSION}" \
            packaging/$VSTOOLCHAIN_PACKAGE
          cp packaging/$VSTOOLCHAIN_PACKAGE/conda_build_config.yaml packaging/$PACKAGE_NAME/conda_build_config.yaml
      - name: Build the conda (conda-build)
        working-directory: ${{ inputs.repository }}
        env:
          CUDATOOLKIT_CHANNEL: ${{ env.CUDATOOLKIT_CHANNEL }}
          PACKAGE_NAME: ${{ inputs.package-name }}
        run: |
          set -euxo pipefail
          cat "${BUILD_ENV_FILE}"
          source "${BUILD_ENV_FILE}"
          export VSTOOLCHAIN_PACKAGE=vs2019
          export VSDEVCMD_ARGS=''

          conda build \
            -c defaults \
            -c "${CUDATOOLKIT_CHANNEL}" \
            -c "pytorch-${CHANNEL}" \
            --no-anaconda-upload \
            --no-test  --python "${PYTHON_VERSION}" \
            --output-folder distr/ \
            "${CONDA_PACKAGE_DIRECTORY}"

          # This is to remove the vs20xx conda package that sneaks into distr
          for pkg in distr/**/*.tar.bz2; do
            if [[ "${pkg}" != *"${PACKAGE_NAME}"* ]]; then
              rm -f "${pkg}"
            fi
          done
      - name: Run Post-Script
        if: ${{ inputs.post-script != '' }}
        uses: ./test-infra/.github/actions/run-script-with-cache
        with:
          repository: ${{ inputs.repository  }}
          script: ${{ inputs.post-script }}
          is_windows: 'enabled'
      - name: Upload artifact to GitHub
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.repository }}/distr/
      - name: Smoke Test
        env:
          PACKAGE_NAME: ${{ inputs.package-name }}
          SMOKE_TEST_SCRIPT: ${{ inputs.smoke-test-script }}
          GPU_ARCH: ${{ matrix.gpu_arch_type }}
          DESIRED_CUDA: ${{ matrix.desired_cuda }}
          GPU_ARCH_VERSION: ${{ matrix.gpu_arch_version }}
        run: |
          set -euxo pipefail
          source "${BUILD_ENV_FILE}"
          FULL_PATH_TO_DISTR="file://$(readlink -f ${{ inputs.repository }}/distr)"
          # fix we have to use for windows to make sure drive path is c: not c
          CONDA_LOCAL_CHANNEL=$(echo $FULL_PATH_TO_DISTR | sed "s/\/c\//\/c:\//")

          export CONDA_ENV_SMOKE="${RUNNER_TEMP}/pytorch_pkg_helpers_${GITHUB_RUN_ID}_smoke"
          conda create --yes --quiet --prefix "${CONDA_ENV_SMOKE}" python="${PYTHON_VERSION}"
          export CONDA_RUN_SMOKE="conda run -p ${CONDA_ENV_SMOKE}"

          if [[ "${GPU_ARCH}" = "cuda" ]]; then
            CONSTRAINTS="pytorch-cuda=${GPU_ARCH_VERSION}"
          else
            CONSTRAINTS="cpuonly"
          fi

          CONSTRAINT_BUILD=""
          if [[ "${CHANNEL}" = "test" ]]; then
            CONSTRAINT_BUILD="=${BUILD_VERSION}"
          fi

          ${CONDA_RUN_SMOKE} conda install \
            --quiet \
            --yes \
            -c "${CONDA_LOCAL_CHANNEL}" \
            -c pytorch-"${CHANNEL}" \
            -c nvidia \
            -c defaults \
            "${PACKAGE_NAME}${CONSTRAINT_BUILD}" \
            ${CONSTRAINTS} \
            --override-channels

          # fow windows we use BUILD_VERSION to validate the package
          CONDA_PKG=$(${CONDA_RUN_SMOKE} conda list | grep "${PACKAGE_NAME}" | grep "${BUILD_VERSION}")
          if [[ -z "${CONDA_PKG}" ]]; then
            ${CONDA_RUN_SMOKE} conda list | grep "${BUILD_VERSION}"
            echo "${PACKAGE_NAME} is not installed with a correct version"
            exit 1
          fi

          if [[ ! -f "${{ inputs.repository }}"/${SMOKE_TEST_SCRIPT} ]]; then
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} not found"
            ${CONDA_RUN_SMOKE} python -c "import ${PACKAGE_NAME}; print('package version is ', ${PACKAGE_NAME}.__version__)"
          else
            echo "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT} found"
            conda install --yes --quiet 'ffmpeg<5'
            ${CONDA_RUN_SMOKE} python "${{ inputs.repository }}/${SMOKE_TEST_SCRIPT}"
          fi
          conda env remove -p "${CONDA_ENV_SMOKE}"

  upload:
    needs: build
    uses: ./.github/workflows/_binary_conda_upload.yml
    with:
      repository: ${{ inputs.repository }}
      ref: ${{ inputs.ref }}
      test-infra-repository: ${{ inputs.test-infra-repository }}
      test-infra-ref: ${{ inputs.test-infra-ref }}
      build-matrix: ${{ inputs.build-matrix }}
      trigger-event: ${{ inputs.trigger-event }}
    secrets:
      CONDA_PYTORCHBOT_TOKEN: ${{ secrets.CONDA_PYTORCHBOT_TOKEN }}
      CONDA_PYTORCHBOT_TOKEN_TEST: ${{ secrets.CONDA_PYTORCHBOT_TOKEN_TEST }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
