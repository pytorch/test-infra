name: Validate manywheel binaries

# This workflow validates the size of the manywheel binaries after repackaging for PyPi
# Specify the direct URLs to the binaries (from https://download.pytorch.org/whl/test/torch/) in the matrix
# along with the python version.
#
# The workflow will:
#  * download the binaries,
#  * run release/pypi/prep_binary_for_pypi.sh
#  * run smoke tests on the repackaged binaries
#  * display the size before and after repackaging as the workflow annotation
#  * optionally upload the repackaged binaries as artifacts (for debug or promotion)

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/validate-repackaged-binary-sizes.yml
      - release/pypi/prep_binary_for_pypi.sh

jobs:
  generate-linux-matrix:
    uses: ./.github/workflows/generate_binary_build_matrix.yml
    with:
      package-type: wheel
      os: linux
      channel: test
      with-xpu: disable
      with-rocm: disable

  validate-binary-size:
    needs: generate-linux-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-linux-matrix.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/linux_job_v2.yml
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.validation_runner }}
      job-name: "Validate binary size"
      repository: "pytorch/pytorch"
      docker-build-dir: "skip-docker-build"
      binary-matrix: ${{ toJSON(matrix) }}
      ref: main
      script: |
        set -ex

        # shellcheck disable=SC2086
        CUDA_VERSION=$(python3 ../../test-infra/tools/scripts/get_stable_cuda_version.py --channel ${MATRIX_CHANNEL})
        # shellcheck disable=SC2086
        CUDA_VERSION_NODOT=$(echo ${CUDA_VERSION} | tr -d '.')

        # skip testing on cu126
        if [[ ${MATRIX_DESIRED_CUDA} != "cu${CUDA_VERSION_NODOT}" ]]; then
          exit 0
        fi

        whl_suffix="linux_x86_64.whl"
        pyndt="$(echo $MATRIX_PYTHON_VERSION | tr -d m.u)"
        base_url="https://download.pytorch.org/whl/${MATRIX_CHANNEL}/${MATRIX_DESIRED_CUDA}"
        whl_url="${base_url}/torch-${MATRIX_STABLE_VERSION}%2B${MATRIX_DESIRED_CUDA}-cp${pyndt}-cp${pyndt}-${whl_suffix}"

        export ENV_NAME="conda-env-${{ github.run_id }}"
        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TARGET_OS="linux"

        # install zip
        sudo yum install zip -y

        # install patchelf
        chmod a+x ./.ci/docker/common/install_patchelf.sh
        sudo ./.ci/docker/common/install_patchelf.sh

        # download torch whl
        wget ${whl_url}
        FILENAME=$(ls -1 *.whl | head -n 1)
        SIZE_BEFORE=$(du -h $FILENAME | cut -f1)

        # repackage into manywheel
        ../../test-infra/release/pypi/prep_binary_for_pypi.sh $FILENAME

        NEW_FILENAME=$(ls -1 *.whl | head -n 1)
        echo "::notice:: $FILENAME before: $SIZE_BEFORE after: $(du -h $NEW_FILENAME | cut -f1)"

        # cp to ${RUNNER_ARTIFACT_DIR}
        cp $NEW_FILENAME ${RUNNER_ARTIFACT_DIR}/

        # create conda env
        conda create -y -n $ENV_NAME python=${MATRIX_PYTHON_VERSION}
        conda activate $ENV_NAME

        # install torch
        pip install numpy pillow $NEW_FILENAME --extra-index-url ${base_url}

        pushd ./.ci/pytorch/smoke_test
        # run smoke test
        python smoke_test.py --package=torchonly --torch-compile-check disabled
        popd
