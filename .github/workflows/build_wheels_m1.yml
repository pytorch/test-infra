name: Build M1 Wheels

on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository to checkout, defaults to ""'
        default: ""
        type: string
      ref:
        description: 'Reference to checkout, defaults to "nightly"'
        default: "nightly"
        type: string

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO: Split this out into its own action to generate this
        # TODO: Find a way to limit matrix for PR testing
        python_version: ["3.8", "3.9", "3.10"]
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
      PACKAGE_TYPE: wheel
      REPOSITORY: ${{ inputs.repository }}
      REF: ${{ inputs.ref }}
    runs-on: macos-m1-12
    # If a build is taking longer than 60 minutes on these runners we need
    # to have a conversation
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
      - name: Set release CHANNEL
        run: |
          # reference ends with an RC suffix
          if [[ ${GITHUB_REF_NAME} = *-rc[0-9]* ]]; then
            echo "CHANNEL=test" >> "${GITHUB_ENV}"
          else
            echo "CHANNEL=nightly" >> "${GITHUB_ENV}"
          fi
      - name: Set artifact name
        run: |
          # Set artifact name here since github actions doesn't have string manipulation tools
          # and "/" is not allowed in artifact names
          echo "ARTIFACT_NAME=${REPOSITORY/\//_}_${REF}_${PYTHON_VERSION}" >> "${GITHUB_ENV}"
      - name: Clean conda environment
        run: |
          conda clean --all --quiet --yes
      - name: Create conda environment
        run: |
          CONDA_ENV="${RUNNER_TEMP}/conda_environment_${GITHUB_RUN_ID}"
          conda create \
            --yes \
            --prefix "${CONDA_ENV}" \
            "python=${PYTHON_VERSION}" \
            cmake=3.22 \
            ninja=1.10 \
            numpy=1.23 \
            pkg-config=0.29 \
            wheel=0.37
          echo "CONDA_ENV=${CONDA_ENV}" >> "${GITHUB_ENV}"
          echo "CONDA_RUN=conda run -p ${CONDA_ENV}" >> "${GITHUB_ENV}"
      - name: Install pytorch-pkg-helpers
        run: |
          ${CONDA_RUN} python3 -m pip install pytorch-pkg-helpers==0.1.0
      - name: Create environemnt variables from pytorch-pkg-helpers
        run: |
          BUILD_ENV_FILE="${RUNNER_TEMP}/build_env_${GITHUB_RUN_ID}"
          ${CONDA_RUN} python3 -m pytorch_pkg_helpers > "${BUILD_ENV_FILE}"
          echo "BUILD_ENV_FILE=${BUILD_ENV_FILE}" >> "${GITHUB_ENV}"
      - name: Install delocate-wheel
        run: |
          ${CONDA_RUN} python3 -m pip install delocate
      - name: Install torch dependency
        run: |
          source "${BUILD_ENV_FILE}"
          # shellcheck disable=SC2086
          ${CONDA_RUN} ${PIP_INSTALL_TORCH}
      - name: Build the wheel (bdist_wheel)
        run: |
          source "${BUILD_ENV_FILE}"
          ${CONDA_RUN} python3 setup.py bdist_wheel
      - name: Delocate wheel
        run: |
          ${CONDA_RUN} DYLD_FALLBACK_LIBRARY_PATH="${CONDA_ENV}/lib" delocate-wheel -v --ignore-missing-dependencies dist/*.whl
      - name: Upload wheel to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/
      # TODO: Figure out upload method to s3

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ inputs.repository }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
