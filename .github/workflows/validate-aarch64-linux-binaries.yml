name: Validate Aarch64 linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
      version:
        description: 'Version to validate - optional'
        default: ""
        required: false
        type: string
      use-version-set:
        description: 'Applies when version is used, use version for each domain'
        default: false
        required: false
        type: boolean
      release-matrix:
        description: 'Release matrix - optional'
        default: ""
        required: false
        type: string
      use-only-dl-pytorch-org:
        description: 'Use only download.pytorch.org when generating wheel install command'
        default: "false"
        required: false
        type: string
      use-meta-cdn:
        description: 'Use meta cdn for installing pip binaries'
        default: false
        required: false
        type: boolean
      use-extra-index-url:
        description: 'Use extra-index url for pip tests'
        default: false
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
      version:
        description: 'Version to validate - optional'
        default: ""
        required: false
        type: string
      release-matrix:
        description: 'Release matrix - optional'
        default: ""
        required: false
        type: string
      use-only-dl-pytorch-org:
        description: 'Use only download.pytorch.org when generating wheel install command'
        default: "false"
        required: false
        type: string
      use-meta-cdn:
        description: 'Use meta cdn for installing pip binaries'
        default: false
        required: false
        type: boolean
      use-extra-index-url:
        description: 'Use extra-index url for pip tests'
        default: false
        required: false
        type: boolean
      use-version-set:
        description: 'Applies when version is used, use version for each domain'
        default: false
        required: false
        type: boolean

jobs:
  generate-aarch64-linux-cpu-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux-aarch64
      channel: ${{ inputs.channel }}
      with-cuda: disable
      use-only-dl-pytorch-org: ${{ inputs.use-only-dl-pytorch-org }}

  generate-aarch64-linux-gpu-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux-aarch64
      channel: ${{ inputs.channel }}
      with-cuda: enable
      use-only-dl-pytorch-org: ${{ inputs.use-only-dl-pytorch-org }}

  linux-aarch64-cpu:
    needs: generate-aarch64-linux-cpu-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-aarch64-linux-cpu-matrix.outputs.matrix) }}
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.validation_runner }}
      repository: "pytorch/pytorch"
      ref: main
      job-name: ${{ matrix.build_name }}
      docker-image: ${{ matrix.container_image }}
      binary-matrix: ${{ toJSON(matrix) }}
      docker-build-dir: "skip-docker-build"
      no-sudo: true
      script: |
        set -ex
        export DESIRED_PYTHON=${{ matrix.python_version }}
        echo "/opt/conda/bin" >> $GITHUB_PATH
        ###############################################################################
        # Install conda
        # disable SSL_verify due to getting "Could not find a suitable TLS CA certificate bundle, invalid path"
        # when using Python version, less than the conda latest
        ###############################################################################
        echo 'Installing conda-forge'
        curl -L -o /mambaforge.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh
        chmod +x /mambaforge.sh
        /mambaforge.sh -b -p /opt/conda
        rm /mambaforge.sh
        source /opt/conda/etc/profile.d/conda.sh
        conda config --set ssl_verify False

        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TARGET_OS="linux-aarch64"
        export TORCH_ONLY=${{ inputs.torchonly }}
        export RELEASE_VERSION=${{ inputs.version }}
        export USE_FORCE_REINSTALL="true"
        export USE_EXTRA_INDEX_URL=${{ inputs.use-extra-index-url }}
        export USE_META_CDN=${{ inputs.use-meta-cdn }}
        export USE_VERSION_SET=${{ inputs.use-version-set }}
        if [[ ${USE_VERSION_SET} == 'true' ]]; then
          export VISION_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchvision }}
          export AUDIO_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchaudio }}
        fi

        printf '%s\n' ${{ toJson(inputs.release-matrix) }} > release_matrix.json
        eval "$(conda shell.bash hook)"

        # NB: The latest conda 23.11.0 pulls in some dependencies of conda-libmamba-solver that
        # require GLIBC_2.25, which is not available in the current aarch64 image causing the
        # subsequence git command to fail. Basically, they don't work with CentOS 7 which AML 2
        # is based on https://github.com/ContinuumIO/anaconda-issues/issues/12822
        unset LD_LIBRARY_PATH

        # Standard case: Validate CPU-only binaries
        source ../../test-infra/.github/scripts/validate_binaries.sh

  linux-aarch64-gpu:
    needs: generate-aarch64-linux-gpu-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-aarch64-linux-gpu-matrix.outputs.matrix) }}
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.validation_runner }}
      repository: "pytorch/pytorch"
      ref: main
      job-name: ${{ matrix.build_name }}
      docker-image: ${{ matrix.container_image }}
      binary-matrix: ${{ toJSON(matrix) }}
      docker-build-dir: "skip-docker-build"
      no-sudo: true
      script: |
        set -ex
        export DESIRED_PYTHON=${{ matrix.python_version }}
        echo "/opt/conda/bin" >> $GITHUB_PATH
        ###############################################################################
        # Install conda
        # disable SSL_verify due to getting "Could not find a suitable TLS CA certificate bundle, invalid path"
        # when using Python version, less than the conda latest
        ###############################################################################
        echo 'Installing conda-forge'
        curl -L -o /mambaforge.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh
        chmod +x /mambaforge.sh
        /mambaforge.sh -b -p /opt/conda
        rm /mambaforge.sh
        source /opt/conda/etc/profile.d/conda.sh
        conda config --set ssl_verify False

        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TARGET_OS="linux-aarch64"
        export TORCH_ONLY=${{ inputs.torchonly }}
        export RELEASE_VERSION=${{ inputs.version }}
        export USE_FORCE_REINSTALL="true"
        export USE_EXTRA_INDEX_URL=${{ inputs.use-extra-index-url }}
        export USE_META_CDN=${{ inputs.use-meta-cdn }}
        export USE_VERSION_SET=${{ inputs.use-version-set }}
        if [[ ${USE_VERSION_SET} == 'true' ]]; then
          export VISION_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchvision }}
          export AUDIO_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchaudio }}
        fi

        printf '%s\n' ${{ toJson(inputs.release-matrix) }} > release_matrix.json
        eval "$(conda shell.bash hook)"

        # NB: The latest conda 23.11.0 pulls in some dependencies of conda-libmamba-solver that
        # require GLIBC_2.25, which is not available in the current aarch64 image causing the
        # subsequence git command to fail. Basically, they don't work with CentOS 7 which AML 2
        # is based on https://github.com/ContinuumIO/anaconda-issues/issues/12822
        unset LD_LIBRARY_PATH

        # GPU case: Validate aarch64 CUDA-enabled binaries in CPU fallback mode
        # Since validation runners don't have GPUs, we test that CUDA builds work in CPU mode
        echo "Validating aarch64 CUDA build - testing installation and CPU fallback mode"
        echo "GPU arch type: ${{ matrix.gpu_arch_type }}, GPU arch version: ${{ matrix.gpu_arch_version }}"

        # For aarch64 CUDA builds, we expect:
        # 1. Installation to succeed
        # 2. torch.cuda.is_available() to return False (no GPU hardware)
        # 3. CPU operations to work correctly
        # 4. No runtime errors when importing torch with CUDA support

        source ../../test-infra/.github/scripts/validate_binaries.sh

        # Additional validation specific to aarch64 CUDA builds
        python3 -c "
        import torch
        print(f'PyTorch version: {torch.__version__}')
        print(f'CUDA available: {torch.cuda.is_available()}')
        print(f'CUDA version: {torch.version.cuda}')
        print('CPU tensor operations work:')
        x = torch.randn(3, 3)
        y = torch.randn(3, 3)
        z = torch.mm(x, y)
        print(f'Matrix multiplication result shape: {z.shape}')
        print('âœ“ aarch64 CUDA build validation passed - installation works and CPU mode functions correctly')
        "
