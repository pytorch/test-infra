name: Validate Windows binary images

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
      version:
        description: 'Version to validate - optional'
        default: ""
        required: false
        type: string
      use-version-set:
        description: 'Applies when version is used, use version for each domain'
        default: false
        required: false
        type: boolean
      release-matrix:
        description: 'Release matrix - optional'
        default: ""
        required: false
        type: string
      use-only-dl-pytorch-org:
        description: 'Use only download.pytorch.org when generating wheel install command'
        default: "false"
        required: false
        type: string
      use-meta-cdn:
        description: 'Use meta cdn for installing pip binaries'
        default: false
        required: false
        type: boolean
      use-extra-index-url:
        description: 'Use extra-index url for pip tests'
        default: false
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
      version:
        description: 'Version to validate - optional'
        default: ""
        required: false
        type: string
      release-matrix:
        description: 'Release matrix - optional'
        default: ""
        required: false
        type: string
      use-only-dl-pytorch-org:
        description: 'Use only download.pytorch.org when generating wheel install command'
        default: "false"
        required: false
        type: string
      use-meta-cdn:
        description: 'Use meta cdn for installing pip binaries'
        default: false
        required: false
        type: boolean
      use-extra-index-url:
        description: 'Use extra-index url for pip tests'
        default: false
        required: false
        type: boolean
      use-version-set:
        description: 'Applies when version is used, use version for each domain'
        default: false
        required: false
        type: boolean

jobs:
  generate-windows-matrix:
    uses: ./.github/workflows/generate_binary_build_matrix.yml
    with:
      package-type: wheel,libtorch #  We stopped producing conda nightlies
      os: windows
      channel: ${{ inputs.channel }}
      use-only-dl-pytorch-org: ${{ inputs.use-only-dl-pytorch-org }}
      with-xpu: enable

  win:
    needs: generate-windows-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-windows-matrix.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/windows_job.yml
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.package_type == 'libtorch' && 'windows.4xlarge' || matrix.validation_runner }}
      repository: "pytorch/pytorch"
      ref: main
      job-name: ${{ matrix.build_name }}
      binary-matrix: ${{ toJSON(matrix) }}
      timeout: 60
      script: |
        set -ex
        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TARGET_OS="windows"
        export TORCH_ONLY=${{ inputs.torchonly }}
        export RELEASE_VERSION=${{ inputs.version }}
        export USE_FORCE_REINSTALL="true"
        export USE_EXTRA_INDEX_URL=${{ inputs.use-extra-index-url }}
        export USE_META_CDN=${{ inputs.use-meta-cdn }}
        export USE_VERSION_SET=${{ inputs.use-version-set }}
        if [[ ${USE_VERSION_SET} == 'true' ]]; then
          export VISION_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchvision }}
          export AUDIO_RELEASE_VERSION=${{ fromJson(inputs.release-matrix).torchaudio }}
        fi

        printf '%s\n' ${{ toJson(inputs.release-matrix) }} > release_matrix.json
        source /c/Jenkins/Miniconda3/etc/profile.d/conda.sh
        if [[ ${MATRIX_GPU_ARCH_TYPE} == "cuda" ]]; then
          ./.ci/pytorch/windows/internal/driver_update.bat
        fi
        source ../../test-infra/.github/scripts/validate_binaries.sh
