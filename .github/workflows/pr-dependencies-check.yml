name: PR Dependency Check

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number or URL'
        type: string
        required: true
      search_depth:
        description: 'Dependencies search depth'
        default: '100'
        type: string
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number or URL'
        type: string
        required: true
      search_depth:
        description: 'Dependencies search depth'
        default: '100'
        type: choice
        options: ['100', '200', '500']

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Extract PR number
        id: extract_pr_number
        shell: bash
        run: |
          PR_NUMBER="${{ inputs.pr_number }}"

          # extract PR number from URL
          if ! PR_NUMBER=$(echo "$PR_NUMBER" | \
                grep -oE -m 1 '^(https://github\.com/pytorch/pytorch/pull/|#)?[0-9]+$' | \
                grep -oE '[0-9]+'); then
              echo "::error::Failed to extract PR number from $PR_NUMBER"
              echo "::notice::Make sure to provide a valid pytorch PR number or URL"
              exit 1
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Checkout Pytorch repository
        uses: malfet/checkout@silent-checkout
        with:
          repository: pytorch/pytorch
          fetch-depth: -1
          submodules: false
          quiet-checkout: true

      - name: Set up Git
        shell: bash
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Check PR dependencies
        shell: bash
        id: pr_merge_check
        run: |
          PR_NUMBER="${{ steps.extract_pr_number.outputs.pr_number }}"
          SEARCH_DEPTH="${{ inputs.search_depth }}"

          # TODO: rewrite the script so that it doesn't rely on +e
          set +e

          # update main
          git checkout main
          git pull
          # reset main to origin/main
          git reset --hard origin/main
          git clean -fd

          # remove branch if exists
          git branch -D pr-branch

          if ! git fetch origin "pull/$PR_NUMBER/head:pr-branch"; then
            echo "Failed to fetch PR #$PR_NUMBER"
            exit 1
          fi

          echo "Analyzing PR [${PR_NUMBER}](https://github.com/pytorch/pytorch/pull/${PR_NUMBER})." >> "$GITHUB_STEP_SUMMARY"

          git checkout pr-branch
          MERGE_BASE=$(git merge-base origin/main HEAD)

          # checkout main
          git checkout main

          # find conflicting commits in main that prevent merging PR into main
          find_conflicting_commits() {
            CONFLICTING_COMMITS=()

            # get all commits in main after MERGE_BASE in reverse order
            COMMITS=$(git log --reverse --oneline "$MERGE_BASE"..HEAD | cut -d' ' -f1)

            echo "----"
            NUM_COMMITS=$(echo "$COMMITS" | wc -w)
            echo "Analyzing $NUM_COMMITS commits in main after MERGE_BASE:"

            # reset main to MERGE_BASE
            git reset --hard "$MERGE_BASE"
            git clean -fd

            # iterate over commits
            # try cherry-picking only the commits that don't conflict with the squashed PR commit
            # if cherry-pick fails, then the commit is also conflict (transitive dependency for other conflicts)
            for COMMIT in $COMMITS; do
              PREV_COMMIT=$(git rev-parse HEAD)

              # try cherry-picking the commit
              # if cherry-pick failed, then the commit is a conflict (it is a dependency for the previous conflicting commits)
              if ! git cherry-pick "$COMMIT"; then
                echo "Found conflict $COMMIT"
                CONFLICTING_COMMITS+=("$COMMIT")
                # abort
                git cherry-pick --abort
                git clean -fd
                git reset --hard "$PREV_COMMIT"
              else
                # try merging pr-branch into main
                if ! git merge --squash --no-commit pr-branch; then
                  echo "Found conflict $COMMIT"
                  CONFLICTING_COMMITS+=("$COMMIT")
                  # abort
                  git merge --abort
                  # remove the grafted commit
                  git reset --hard "$PREV_COMMIT"
                else
                  # drop the staged changes
                  git reset --hard
                fi

                git clean -fd
              fi
            done

            # reset main to MERGE_BASE
            git reset --hard "$MERGE_BASE"
            git clean -fd

            # print conflicts
            {
              echo "### Found ${#CONFLICTING_COMMITS[@]} conflicts:"
              echo "These conflicts prevent merging PR #$PR_NUMBER into main / reverting it (if it is already merged)."
              echo "These are commits in the \`main\` branch that conflict with the PR and prevent it from being \
                    merged/reverted."
              echo "To merge this pr, these commits have to be reverted, or the PR has to be rebased onto \`main\` using \
                    the manual conflict resolution."
              echo "If the PR is already merged, then these commits have to be reverted to revert the PR."
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            for CONFLICT in "${CONFLICTING_COMMITS[@]}"; do
              echo "- $(git show --oneline -s "$CONFLICT")" >> "$GITHUB_STEP_SUMMARY"
            done
            echo "conflicting_commits=${CONFLICTING_COMMITS[*]}" >> "$GITHUB_OUTPUT"
            echo "num_conflicting_commits=${#CONFLICTING_COMMITS[*]}" >> "$GITHUB_OUTPUT"
            {
              echo ""
              echo "---"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"
          }
          PR_IS_MERGEABLE=1
          # try merging pr-branch into main
          if ! git merge --no-commit --no-ff pr-branch; then
            # red
            echo "::error::PR is NOT mergeable into main / revertable (if it is already merged)!"

            git merge --abort
            find_conflicting_commits
            PR_IS_MERGEABLE=0
            echo "----"
          else
            # same as a github warning
            echo "::notice::PR is mergeable into main / revertable (if it is already merged)."
          fi
          echo "pr_is_mergeable=${PR_IS_MERGEABLE}" >> "$GITHUB_OUTPUT"
          # reset main to MERGE_BASE
          git reset --hard "$MERGE_BASE"

          # merge pr-branch into main with squash

          if ! git merge --squash pr-branch; then
            echo "Something went wrong while squashing commits!"
            git merge --abort
          fi

          git commit -m "Squashed changes from PR #$PR_NUMBER"

          # SEARCH_DEPTH Commits to analyze:
          COMMITS=$(git log --oneline HEAD~$((SEARCH_DEPTH+1))..HEAD~1 | cut -d' ' -f1)

          echo "----"
          echo "Analyzing history:"
          # non-interactively print commits HEAD~$SEARCH_DEPTH..HEAD
          git log --oneline HEAD~$((SEARCH_DEPTH+1))..HEAD~1 | cat
          echo "----"

          DEPENDENCIES=()

          git merge --abort
          git rebase --abort
          rm -fr ".git/rebase-merge"
          git clean -fd

          # iterate over commits and find dependencies
          for COMMIT in $COMMITS; do
            echo "Analyzing commit $COMMIT"

            # try removing the commit from the branch
            # if rebase failed, then the commit is a dependency
            if ! git rebase --onto "${COMMIT}^" "$COMMIT"; then
              echo "Found dependency $COMMIT"
              DEPENDENCIES+=("$COMMIT")
              # abort
              git rebase --abort
              git clean -fd
            fi
          done

          {
            echo "### Found ${#DEPENDENCIES[@]} dependencies in ${SEARCH_DEPTH} commits before the base of #$PR_NUMBER:"
            echo "Dependencies here are the commits in PR's base history that are essential for the PR to be mergeable \
                  into its own base. I.e., these dependencies cannot be reverted without reverting the PR first."
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # print dependencies with commit messages
          for DEPENDENCY in "${DEPENDENCIES[@]}"; do
            echo "- $(git show --oneline -s "$DEPENDENCY")" >> "$GITHUB_STEP_SUMMARY"
          done

          echo "Check the job Summary for the results:"
          echo "https://github.com/pytorch/test-infra/actions/runs/${{ github.run_id }}"

      - name: Fail if PR is Not Mergeable
        if: ${{ steps.pr_merge_check.outputs.pr_is_mergeable == '0' }}
        run: |
          PR_NUMBER="${{ steps.extract_pr_number.outputs.pr_number }}"
          CONFLICTING_COMMITS="${{ steps.pr_merge_check.outputs.conflicting_commits }}"
          NUM_CONFLICTING_COMMITS="${{ steps.pr_merge_check.outputs.num_conflicting_commits }}"
          echo "Mergeability Error: PR #$PR_NUMBER is NOT mergeable into main / revertable (if it is already merged) due to $NUM_CONFLICTING_COMMITS conflicting commits which are:"
          for CONFLICT in $CONFLICTING_COMMITS; do
            echo "- $(git show --oneline -s "$CONFLICT")"
          done
          echo "Please rebase your PR onto main and resolve the conflicts."
          exit 1
