name: Setup Linux

description: Set up Docker workspace on EC2

runs:
  using: composite
  steps:
    - name: Display EC2 information
      shell: bash
      run: |
        set -euo pipefail
        function get_ec2_metadata() {
          # Pulled from instance metadata endpoint for EC2
          # see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
          category=$1
          curl -fsSL "http://169.254.169.254/latest/meta-data/${category}"
        }
        echo "ami-id: $(get_ec2_metadata ami-id)"
        echo "instance-id: $(get_ec2_metadata instance-id)"
        echo "instance-type: $(get_ec2_metadata instance-type)"
        echo "system info $(uname -a)"

    - name: Start docker if docker deamon is not running
      shell: bash
      run: |
        if systemctl is-active --quiet docker; then
            echo "Docker daemon is running...";
        else
            echo "Starting docker deamon..." && sudo systemctl start docker;
        fi

    - name: Log in to ECR
      shell: bash
      env:
        AWS_RETRY_MODE: standard
        AWS_MAX_ATTEMPTS: "5"
        AWS_DEFAULT_REGION: us-east-1
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity|grep Account|cut -f4 -d\")
        retry () { "$@"  || (sleep 1 && "$@") || (sleep 2 && "$@") }
        retry aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS \
            --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"

    - name: Preserve github env variables for use in docker
      shell: bash
      run: |
        env | grep '^GITHUB' >> "${RUNNER_TEMP}/github_env_${GITHUB_RUN_ID}"
        env | grep '^CI' >> "${RUNNER_TEMP}/github_env_${GITHUB_RUN_ID}"

    - name: Setup useful environment variables
      shell: bash
      working-directory: ${{ inputs.repository }}
      run: |
        RUNNER_ARTIFACT_DIR="${RUNNER_TEMP}/artifacts"
        mkdir -p "${RUNNER_ARTIFACT_DIR}"
        echo "RUNNER_ARTIFACT_DIR=${RUNNER_TEMP}/artifacts" >> "${GITHUB_ENV}"

    - name: Needs nvidia driver?
      shell: bash
      id: needs-nvidia-driver
      run: |
        needs=0
        if lspci -v | grep "VGA.*NVIDIA" >/dev/null 2>/dev/null; then
          needs=1
        fi
        echo "::set-output name=does::${needs}"

    - name: Install nvidia driver, nvidia-docker runtime, set GPU_FLAG
      uses: nick-fields/retry@7d4a37704547a311dbb66ebdf5b23ec19374a767
      if: ${{ steps.needs-nvidia-driver.outputs.does == 1 }}
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          # Is it disgusting to have a full shell script here in this github action? Sure
          # But is it the best way to make it so that this action relies on nothing else? Absolutely
          set -eou pipefail

          DISTRIBUTION=$(. /etc/os-release;echo $ID$VERSION_ID)
          DRIVER_VERSION="515.57"
          DRIVER_FN="NVIDIA-Linux-x86_64-${DRIVER_VERSION}.run"
          YUM_REPO_URL="https://nvidia.github.io/nvidia-docker/${DISTRIBUTION}/nvidia-docker.repo"

          install_nvidia_docker2_amzn2() {
              (
                  set -x
                  # Needed for yum-config-manager
                  sudo yum install -y yum-utils
                  sudo yum-config-manager --add-repo "${YUM_REPO_URL}"
                  sudo yum install -y nvidia-docker2
                  sudo systemctl restart docker
              )
          }

          install_nvidia_driver_amzn2() {
              (
                  set -x

                  HAS_NVIDIA_DRIVER=0
                  # Check if NVIDIA driver has already been installed
                  if [ -x "$(command -v nvidia-smi)" ]; then
                      # The driver exists, check its version next
                      INSTALLED_DRIVER_VERSION=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader)

                      if [ "$INSTALLED_DRIVER_VERSION" != "$DRIVER_VERSION" ]; then
                          # TODO
                          # Remove this after torchrec and FBGEMM have both been updated to use
                          # PyTorch NVIDIA installation script instead of using the latest driver
                          # from RHEL repo
                          HAS_NVIDIA_DRIVER=1
                          echo "NVIDIA driver ($INSTALLED_DRIVER_VERSION) has been installed, but we expect to have $DRIVER_VERSION instead. Skipping NVIDIA driver installation for now until torchrec and FBGEMM are updated to use PyTorch NVIDIA installation script instead of RHEL repo"
                      else
                          HAS_NVIDIA_DRIVER=1
                          echo "NVIDIA driver ($INSTALLED_DRIVER_VERSION) has already been installed. Skipping NVIDIA driver installation"
                      fi
                  fi

                  if [ "$HAS_NVIDIA_DRIVER" -eq 0 ]; then
                      sudo yum groupinstall -y "Development Tools"
                      # ensure our kernel install is the same as our underlying kernel,
                      # groupinstall "Development Tools" has a habit of mismatching kernel headers
                      sudo yum install -y "kernel-devel-uname-r == $(uname -r)"
                      sudo modprobe backlight
                      sudo curl -fsL -o /tmp/nvidia_driver "https://s3.amazonaws.com/ossci-linux/nvidia_driver/$DRIVER_FN"
                      sudo /bin/bash /tmp/nvidia_driver -s --no-drm || (sudo cat /var/log/nvidia-installer.log && false)
                      sudo rm -fv /tmp/nvidia_driver
                  fi

                  nvidia-smi
              )
          }

          echo "== Installing nvidia driver ${DRIVER_FN} =="
          case "${DISTRIBUTION}" in
              amzn*)
                  install_nvidia_driver_amzn2
                  ;;
              *)
                  echo "ERROR: Unknown distribution ${DISTRIBUTION}"
                  exit 1
                  ;;
          esac

          # Install container toolkit based on distribution
          echo "== Installing nvidia container toolkit for ${DISTRIBUTION} =="
          case "${DISTRIBUTION}" in
              amzn*)
                  install_nvidia_docker2_amzn2
                  ;;
              *)
                  echo "ERROR: Unknown distribution ${DISTRIBUTION}"
                  exit 1
                  ;;
          esac
          echo "GPU_FLAG=--gpus all" >> "${GITHUB_ENV}"
