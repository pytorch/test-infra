name: Calculate docker image

description: Determine docker image to pull, building a new one if necessary.

inputs:
  docker-image-name:
    description: |
      The name of a docker image, like `pytorch-linux-focal-linter`. A fullname
      with ECR prefix is also supported.
    required: true
  docker-build-dir:
    description: |
      The directory containing the build.sh shell script to build the docker image.
      The script parameters can be passed to docker build similar to how it is used
      in PyTorch, i.e. build.sh "${IMAGE_NAME}" -t "${DOCKER_IMAGE}".
    default: .ci/docker
  docker-build-script:
    description: |
      The script to build the docker image. Should be relative to the docker-build-dir.
    default: ./build.sh
  custom-tag-prefix:
    description: |
      The prefix to use for the docker image tag.  You can also just do imagename:customtag
    default: ""
  working-directory:
    description: The working directory where the repo is checked out.
    default: .
  docker-registry:
    description: The registry to store the image after it is built.
    default: 308535385114.dkr.ecr.us-east-1.amazonaws.com
  always-rebuild:
    description: If set to any value, always build a fresh docker image.
    required: false
  push:
    description: If set to true, push the image to ECR.
    required: false
  force-push:
    description: If set to true, always push the image to ECR even if it exists.
    required: false
    default: false

outputs:
  docker-image:
    description: The docker image to use for the rest of the workflow
    value: ${{ steps.calculate-image.outputs.docker-image }}

runs:
  using: composite
  steps:
    - name: Calculate docker image
      id: calculate-image
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        REPO_NAME: ${{ github.event.repository.name }}
        DOCKER_IMAGE_NAME: ${{ inputs.docker-image-name }}
        DOCKER_BUILD_DIR: ${{ inputs.docker-build-dir }}
        DOCKER_BUILD_SCRIPT: ${{ inputs.docker-build-script }}
        DOCKER_REGISTRY: ${{ inputs.docker-registry }}
        CUSTOM_TAG_PREFIX: ${{ inputs.custom-tag-prefix }}
      run: |
        set -ex

        # If the docker build directory or the build script doesn't exist, the action will
        # gracefully return the docker image name as it is.  Pulling docker image in Linux
        # job could then download the pre-built image as usual
        if [[ ! -d "${DOCKER_BUILD_DIR}" ]] || [[ ! -f "${DOCKER_BUILD_DIR}/${DOCKER_BUILD_SCRIPT}" ]]; then
          echo "skip=true" >> "${GITHUB_OUTPUT}"
          echo "docker-image=${DOCKER_IMAGE_NAME}" >> "${GITHUB_OUTPUT}"

          echo "There is no Docker build script in ${REPO_NAME} repo, skipping..."
          exit 0
        else
          echo "skip=false" >> "${GITHUB_OUTPUT}"
        fi

        if [[ "${DOCKER_IMAGE_NAME}" == *"${DOCKER_REGISTRY}/${REPO_NAME}"* ]]; then
          # The docker image name already includes the ECR prefix and tag, so we can just
          # use it as it is, but first let's extract the tag
          DOCKER_TAG=$(echo "${DOCKER_IMAGE_NAME}" | awk -F '[:,]' '{print $2}')
          echo "docker-tag=${DOCKER_TAG}" >> "${GITHUB_OUTPUT}"
          echo "docker-image=${DOCKER_IMAGE_NAME}" >> "${GITHUB_OUTPUT}"
        else
          if [[ "${DOCKER_IMAGE_NAME}" == *:* ]]; then
            CUSTOM_TAG_PREFIX=${DOCKER_IMAGE_NAME#*:}
            DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME%%:*}
          fi
          DOCKER_TAG=${CUSTOM_TAG_PREFIX:+${CUSTOM_TAG_PREFIX}-}$(git rev-parse HEAD:"${DOCKER_BUILD_DIR}")
          echo "docker-tag=${DOCKER_TAG}" >> "${GITHUB_OUTPUT}"
          echo "docker-image=${DOCKER_REGISTRY}/${REPO_NAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" >> "${GITHUB_OUTPUT}"
          echo "custom-tag-prefix=${CUSTOM_TAG_PREFIX}" >> "${GITHUB_OUTPUT}"
        fi

    - name: Check if image should be built
      id: check-image
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      if: ${{ steps.calculate-image.outputs.skip != 'true' && !inputs.always-rebuild }}
      env:
        DOCKER_BUILD_DIR: ${{ inputs.docker-build-dir }}
        BASE_REVISION: ${{ github.event.pull_request.base.sha || github.sha }}
        DOCKER_IMAGE: ${{ steps.calculate-image.outputs.docker-image }}
        DOCKER_TAG: ${{ steps.calculate-image.outputs.docker-tag }}
        DOCKER_REGISTRY: ${{ inputs.docker-registry }}
        DOCKER_PUSH: ${{ inputs.push }}
      run: |
        set +e
        set -x

        login() {
          aws ecr get-login-password --region us-east-1 | docker login -u AWS --password-stdin "$1"
        }

        retry () {
          $*  || (sleep 1 && $*) || (sleep 2 && $*)
        }

        retry login "${DOCKER_REGISTRY}"

        START_TIME=$(date +%s)
        # Wait up to 120 minutes
        while [[ $(( $(date +%s) - 7200 )) -lt $START_TIME ]]; do
          # Check if image already exists, if it does then skip building it
          if docker manifest inspect "${DOCKER_IMAGE}"; then
            exit 0
          fi

          # NB: This flag is used by Docker build workflow to push the image to ECR, so we can
          # use this to differentiate between the Docker build and regular build jobs. For the
          # latter, it will wait for the Docker images to become available before continuing
          if [ "${DOCKER_PUSH:-false}" == "true" ]; then
            # It's a Docker build job, let's build the image
            break
          else
            # It's a regular build job, wait for the image to become available
            sleep 300
          fi
        done

        # NB: This part requires a full checkout. Otherwise, the merge base will
        # be empty.  The default action would be to continue rebuild the image
        if [[ "$BASE_REVISION" = "$(git rev-parse HEAD)" ]]; then
          # if we're on the base branch then use the parent commit
          MERGE_BASE=$(git rev-parse HEAD~)
        else
          # otherwise we're on a PR, so use the most recent base commit
          MERGE_BASE=$(git merge-base HEAD "$BASE_REVISION")
        fi

        if [[ -z "${MERGE_BASE}" ]]; then
          echo "rebuild=true" >> "${GITHUB_OUTPUT}"

          echo "Finding merge base only works with full checkout, please set fetch-depth to 0, continuing ..."
          exit 0
        fi

        if ! git rev-parse "${MERGE_BASE}:${DOCKER_BUILD_DIR}"; then
          echo "Directory '${DOCKER_BUILD_DIR}' not found in commit $MERGE_BASE, you should rebase onto a more recent commit"
          exit 1
        fi

        PREVIOUS_DOCKER_TAG=$(git rev-parse "${MERGE_BASE}:${DOCKER_BUILD_DIR}")
        # If no image exists but the hash is the same as the previous hash then we should error out here
        if [[ "${PREVIOUS_DOCKER_TAG}" == "${DOCKER_TAG}" ]]; then
          echo "WARNING: Something has gone wrong and the previous image isn't available for the merge-base of your branch"
          echo "         Will re-build docker image to store in local cache, TTS may be longer"
        fi

        echo "rebuild=true" >> "${GITHUB_OUTPUT}"

    - name: Login to ECR
      if: ${{ steps.calculate-image.outputs.skip != 'true' && (inputs.always-rebuild || steps.check-image.outputs.rebuild) }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}/${{ inputs.docker-build-dir }}
      env:
        DOCKER_REGISTRY: ${{ inputs.docker-registry }}
      run: |
        set -x
        set +e

        login() {
          aws ecr get-login-password --region us-east-1 | docker login -u AWS --password-stdin "$1"
        }

        retry () {
          $*  || (sleep 1 && $*) || (sleep 2 && $*)
        }

        retry login "${DOCKER_REGISTRY}"

    - name: Login to Docker Hub
      shell: bash
      # It's ok if this steps fails, it would then be an anonymous user like what we used to have
      continue-on-error: true
      run: |
        set -eux
        aws secretsmanager get-secret-value --secret-id docker_hub_readonly_token | jq --raw-output '.SecretString' | jq -r .docker_hub_readonly_token | docker login --username pytorchbot --password-stdin

    - name: Build docker image
      if: ${{ steps.calculate-image.outputs.skip != 'true' && (inputs.always-rebuild || steps.check-image.outputs.rebuild) }}
      env:
        REPO_NAME: ${{ github.event.repository.name }}
        DOCKER_IMAGE: ${{ steps.calculate-image.outputs.docker-image }}
        CUSTOM_TAG_PREFIX: ${{ steps.calculate-image.outputs.custom-tag-prefix }}
        DOCKER_REGISTRY: ${{ inputs.docker-registry }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}/${{ inputs.docker-build-dir }}
        DOCKER_BUILD_SCRIPT: ${{ inputs.docker-build-script }}
      # NB: Retry here as this step frequently fails with network error downloading various stuffs
      uses: nick-fields/retry@v3.0.0
      with:
        shell: bash
        timeout_minutes: 90
        max_attempts: 3
        retry_wait_seconds: 90
        command: |
          set -ex

          # NB: Setting working directory on the step doesn't work with nick-fields/retry https://github.com/nick-fields/retry/issues/89
          pushd "${WORKING_DIRECTORY}"

          IMAGE_NAME=$(echo ${DOCKER_IMAGE#"${DOCKER_REGISTRY}/${REPO_NAME}/"} | awk -F '[:,]' '{print $1}')
          # Build new image
          ${DOCKER_BUILD_SCRIPT} "${IMAGE_NAME}${CUSTOM_TAG_PREFIX:+:${CUSTOM_TAG_PREFIX}}" -t "${DOCKER_IMAGE}"

          popd

    - name: Push to ECR
      if: ${{ steps.calculate-image.outputs.skip != 'true' && (inputs.always-rebuild || steps.check-image.outputs.rebuild) }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}/${{ inputs.docker-build-dir }}
      env:
        DOCKER_PUSH: ${{ inputs.push }}
        DOCKER_FORCE_PUSH: ${{ inputs.force-push }}
        DOCKER_IMAGE: ${{ steps.calculate-image.outputs.docker-image }}
      run: |
        set -ex

        if [ "${DOCKER_PUSH:-false}" == "true" ]; then
          # Only push if docker image doesn't exist already
          if ! docker manifest inspect "${DOCKER_IMAGE}" >/dev/null 2>/dev/null || [ "${DOCKER_FORCE_PUSH:-false}" == "true" ]; then
            docker push "${DOCKER_IMAGE}"
          fi
          # Check that upload was successfull or that image already exists
          docker manifest inspect "${DOCKER_IMAGE}"
        fi
