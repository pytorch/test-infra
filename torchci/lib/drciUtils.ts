import _ from "lodash";
import { Octokit } from "octokit";
import { IssueData } from "./types";

export const NUM_MINUTES = 15;
export const REPO: string = "pytorch";
export const OWNER: string = "pytorch";
export const DRCI_COMMENT_START = "<!-- drci-comment-start -->\n";
export const OH_URL =
    "https://github.com/pytorch/pytorch/wiki/Dev-Infra-Office-Hours";
export const DOCS_URL = "https://docs-preview.pytorch.org/";
export const PYTHON_DOCS_URL = "/index.html";
export const CPP_DOCS_URL = "/cppdocs/index.html";
export const DRCI_COMMENT_END = `\n
This comment was automatically generated by Dr. CI and updates every 15 minutes.
<!-- drci-comment-end -->`;
export const HUD_URL = "https://hud.pytorch.org/pr/";
const SEV_SEARCH_URL = "https://github.com/pytorch/pytorch/issues?q=is%3Aissue+label%3A%22ci%3A+sev%22+is%3Aopen";


export function formDrciHeader(prNum: number): string {
    return `## :link: Helpful Links
### :test_tube: See artifacts and rendered test results at [hud.pytorch.org/pr/${prNum}](${HUD_URL}${prNum})
* :page_facing_up: Preview [Python docs built from this PR](${DOCS_URL}${prNum}${PYTHON_DOCS_URL})
* :page_facing_up: Preview [C++ docs built from this PR](${DOCS_URL}${prNum}${CPP_DOCS_URL})
* :question: Need help or want to give feedback on the CI? Visit our [office hours](${OH_URL})

Note: Links to docs will display an error until the docs builds have been completed.`;
}

export function formDrciComment(
  pr_num: number,
  pr_results: string = "",
  sevs: string = ""
): string {
  const header = formDrciHeader(pr_num);
  const comment = `${DRCI_COMMENT_START}
${header}
${sevs}
${pr_results}
${DRCI_COMMENT_END}`;
  return comment;
}


export async function getDrciComment(
  octokit: Octokit,
  owner: string,
  repo: string,
  prNum: number
): Promise<{ id: number; body: string }> {
  const commentsRes = await octokit.rest.issues.listComments({
    owner: owner,
    repo: repo,
    issue_number: prNum,
  });
  for (const comment of commentsRes.data) {
    if (comment.body!.includes(DRCI_COMMENT_START)) {
      return { id: comment.id, body: comment.body! };
    }
  }
  return { id: 0, body: "" };
}

export async function getActiveSEVs(issues: IssueData[]): Promise<string> {
  const activeSEVs = issues.filter(
    (issue: IssueData) => issue.state === "open"
  );
  if (activeSEVs.length === 0) {
    return "";
  }
  const [merge_blocking, not_merge_blocking] = _.partition(
    activeSEVs,
    (issue: IssueData) => issue.body.toLowerCase().includes("merge blocking")
  );
  const sev_list = merge_blocking
    .concat(not_merge_blocking)
    .map(
      (issue: IssueData) =>
        `* ${
          issue.body.toLowerCase().includes("merge blocking")
            ? "(merge blocking) "
            : ""
        }[${issue.title}](${issue.html_url.replace(
          "github.com",
          "hud.pytorch.org"
        )})`
    )
    .join("\n");
  if (merge_blocking.length > 0) {
    return `## :heavy_exclamation_mark: ${merge_blocking.length} Merge Blocking SEVs
There is an active merge blocking SEV.  Please view them [here](${SEV_SEARCH_URL}) or below:
${sev_list}\n
If you must merge, use \`@pytorchbot merge -f\`.`;
  } else {
    return `## :heavy_exclamation_mark: ${activeSEVs.length} Active SEVs
There are ${activeSEVs.length} currently active SEVs.   If your PR is affected, please view them [here](${SEV_SEARCH_URL}) or below:
${sev_list}\n
`;
  }
}
